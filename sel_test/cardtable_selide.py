# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities


class TestSelectPaul:
    def setup_method(self, method):
        firefox_options = webdriver.FirefoxOptions()
        self.driver = webdriver.Remote(
            command_executor="http://localhost:4444", options=firefox_options
        )
        self.vars = {}
        self.player_ids = []

    def teardown_method(self, method):
        self.driver.quit()

    def wait_for_window(self, timeout=2000):
        time.sleep(round(timeout / 1000))
        wh_now = self.driver.window_handles
        wh_then = self.vars["window_handles"]
        if len(wh_now) > len(wh_then):
            return set(wh_now).difference(set(wh_then)).pop()

    def test_selectPaul(self):
        # Test name: Select-Paul
        # Step # | name | target | value
        # 1 | open | / |
        self.driver.get("http://172.16.42.10:5000/")
        # 2 | waitForElementPresent | xpath=(/html/body/div[2]/div[2]) | 30000
        WebDriverWait(self.driver, 30000).until(
            expected_conditions.presence_of_element_located(
                (By.XPATH, "(/html/body/div[2]/div[2])")
            )
        )
        # 3 | assertElementPresent | xpath=(/html/body/div[2]/div[2]//*[1]/*[1]) |
        elements = self.driver.find_elements(
            By.XPATH, "(/html/body/div[2]/div[2]//*[1]/*[1])"
        )
        assert len(elements) > 0
        # 4 | waitForElementPresent | xpath=(//*[@id="canvas" and contains(.,"Player:")]) | 30000
        WebDriverWait(self.driver, 30000).until(
            expected_conditions.presence_of_element_located(
                (By.XPATH, '(//*[@id="canvas" and contains(.,"Player:")])')
            )
        )
        # 5 | assertElementPresent | xpath=(//*[@id="canvas" and contains(.,"Player: Paul")]) |
        elements = self.driver.find_elements(
            By.XPATH, '(//*[@id="canvas" and contains(.,"Player: Paul")])'
        )
        assert len(elements) > 0
        # 7 | executeScript | return ['fe634138-c83a-4b9d-b2ed-d57943797b96','922e9e29-87b9-4d51-9948-fa3bc8f21388','fe27c087-5278-457e-a202-ad06faa51121','89c397be-25c9-4613-973b-5c0136714c87'] | player_ids
        self.vars["player_ids"] = self.driver.execute_script(
            "return ['fe634138-c83a-4b9d-b2ed-d57943797b96','922e9e29-87b9-4d51-9948-fa3bc8f21388','fe27c087-5278-457e-a202-ad06faa51121','89c397be-25c9-4613-973b-5c0136714c87']"
        )
        self.player_ids = [
            "fe634138-c83a-4b9d-b2ed-d57943797b96",
            "922e9e29-87b9-4d51-9948-fa3bc8f21388",
            "fe27c087-5278-457e-a202-ad06faa51121",
            "89c397be-25c9-4613-973b-5c0136714c87",
        ]
        # 8 | forEach | player_ids | p_id
        collection = self.vars["player_ids"]
        for entry in collection:
            # self.vars["p_id"] = entry
            # 9 | echo | ${p_id} |
            # print(str(self.vars["p_id"]))
            # 10 | open | / |
            self.vars["window_handles"] = self.driver.window_handles
            # 11 | end |  |
            self.driver.get("http://172.16.42.10:5000/")
            # 12 | forEach | player_ids | p_id
            self.vars[entry] = self.wait_for_window(2000)
            # 13 | selectWindow | handle=${p_id} |
        # 14 | click | //[@id='${p_id}'] |
        # collection = self.vars["player_ids"]
        for entry in collection:
            # 15 | end |  |
            self.driver.switch_to.window(entry)
            self.driver.find_element(By.XPATH, f"//[@id={entry}]").click()

